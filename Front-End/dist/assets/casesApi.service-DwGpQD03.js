var h=Object.defineProperty;var d=(t,r,e)=>r in t?h(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e;var p=(t,r,e)=>d(t,typeof r!="symbol"?r+"":r,e);import{A as g,a as s}from"./PathologistList.vue_vue_type_style_index_0_scoped_45f5ffeb_lang-FwbajLSj.js";class w{constructor(){p(this,"endpoint",g.ENDPOINTS.CASES)}async consultarConsecutivo(){try{return await s.get(`${this.endpoint}/siguiente-consecutivo`)}catch(r){throw new Error(r.message||"Error al consultar el consecutivo")}}async getCases(r={}){try{return await s.get(this.endpoint,{params:r})}catch(e){throw new Error(e.message||"Error al obtener la lista de casos")}}async getCaseByCode(r){try{return await s.get(`${this.endpoint}/caso-code/${r}`)}catch(e){throw new Error(e.message||`Error al obtener el caso ${r}`)}}async getCasesByPatient(r){try{return await s.get(`${this.endpoint}/paciente/${r}`)}catch(e){throw new Error(e.message||`Error al obtener casos del paciente ${r}`)}}async getCasesByPathologist(r){try{return await s.get(`${this.endpoint}/patologo/${r}`)}catch(e){throw new Error(e.message||`Error al obtener casos del patólogo ${r}`)}}async getCasesByState(r){try{return await s.get(`${this.endpoint}/estado/${r}`)}catch(e){throw new Error(e.message||`Error al obtener casos con estado ${r}`)}}async getCaseStatistics(){try{return await s.get(`${this.endpoint}/estadisticas`)}catch(r){throw new Error(r.message||"Error al obtener estadísticas del sistema")}}async searchCases(r){try{return await s.post(`${this.endpoint}/buscar`,r)}catch(e){throw new Error(e.message||"Error al buscar casos")}}async searchCasesAdvanced(r){try{return await s.get(`${this.endpoint}/search`,{params:r})}catch(e){throw new Error(e.message||"Error en la búsqueda avanzada")}}async createCase(r){try{return await s.post(this.endpoint,r)}catch(e){throw this.handleValidationError(e)}}async updateCase(r,e){try{return await s.put(`${this.endpoint}/caso-code/${r}`,e)}catch(a){throw new Error(a.message||`Error al actualizar el caso ${r}`)}}async assignPathologist(r,e){try{return await s.put(`${this.endpoint}/caso-code/${r}/asignar-patologo`,e)}catch(a){throw new Error(a.message||`Error al asignar patólogo al caso ${r}`)}}async unassignPathologist(r){try{return await s.delete(`${this.endpoint}/caso-code/${r}/desasignar-patologo`)}catch(e){throw new Error(e.message||`Error al desasignar patólogo del caso ${r}`)}}async deleteCase(r){try{return await s.delete(`${this.endpoint}/caso-code/${r}`)}catch(e){throw new Error(e.message||`Error al eliminar el caso ${r}`)}}handleValidationError(r){var e,a,o,n;if((a=(e=r.response)==null?void 0:e.data)!=null&&a.detail){const l=Array.isArray(r.response.data.detail)?r.response.data.detail.map(c=>{var i;return`${(i=c.loc)==null?void 0:i.join(".")}: ${c.msg}`}).join(", "):r.response.data.detail;return new Error(`Error de validación: ${l}`)}return(n=(o=r.response)==null?void 0:o.data)!=null&&n.message?new Error(r.response.data.message):new Error(r.message||"Error al crear el caso médico")}}const $=new w;export{$ as c};
